// Generated by CoffeeScript 1.4.0

  var Page, render,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Page = (function() {

    function Page(data, category, paginate) {
      var post;
      this.category = category != null ? category : "all";
      this.paginate = paginate != null ? paginate : 10;
      this.clickPagination = __bind(this.clickPagination, this);

      this.renderPagination = __bind(this.renderPagination, this);

      this.renderPosts = __bind(this.renderPosts, this);

      this.render = __bind(this.render, this);

      this.renderPage = __bind(this.renderPage, this);

      this.posts = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          post = data[_i];
          if (this.category === "all" || post.category === this.category) {
            _results.push(post);
          }
        }
        return _results;
      }).call(this);
      this.pageNum = Math.ceil(this.posts.length / this.paginate);
      this.renderPage();
      this.render(0);
    }

    Page.prototype.renderPage = function() {
      $('div.home').append("<ul class=\"posts\"></ul>");
      return $('ul.posts').after("<div class=\"pagination\"></div>");
    };

    Page.prototype.render = function(pageIndex) {
      this.renderPosts(pageIndex);
      return this.renderPagination(pageIndex);
    };

    Page.prototype.renderPosts = function(pageIndex) {
      var post, _i, _len, _ref, _results;
      $('ul.posts').empty();
      _ref = this.posts.slice(pageIndex * this.paginate, (pageIndex + 1) * this.paginate);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        _results.push($('ul.posts').append("<li><span>" + post.date + "</span> &raquo; <a href=\"" + post.url + "\">" + post.title + "</a></li>"));
      }
      return _results;
    };

    Page.prototype.renderPagination = function(pageIndex) {
      var active, pageList, seq, _i, _ref;
      $("div.pagination").empty();
      pageList = $("<ul/>").appendTo("div.pagination");
      active = pageIndex === 0 ? "disabled" : "";
      pageList.append("<li class=\"" + active + "\"><a href=\"#\" class=\"prev pagination\">&laquo;</a></li>");
      for (seq = _i = 0, _ref = this.pageNum; 0 <= _ref ? _i < _ref : _i > _ref; seq = 0 <= _ref ? ++_i : --_i) {
        active = seq === pageIndex ? "active" : "";
        pageList.append("<li class=\"" + active + "\"><a href=\"#\" class=\"pagination\">" + (seq + 1) + "</a></li>");
      }
      active = pageIndex === this.pageNum - 1 ? "disabled" : "";
      pageList.append("<li class=\"" + active + "\"><a href=\"#\" class=\"next pagination\">&raquo;</a></li>");
      return this.currPageLi = $("div.pagination ul li.active:first");
    };

    Page.prototype.active = function(obj) {
      if (!obj.hasClass("active")) {
        return obj.addClass("active");
      }
    };

    Page.prototype.disActive = function(obj) {
      if (obj.hasClass("active")) {
        return obj.removeClass("active");
      }
    };

    Page.prototype.disable = function(obj) {
      if (!obj.hasClass("disabled")) {
        return obj.addClass("disabled");
      }
    };

    Page.prototype.enable = function(obj) {
      if (obj.hasClass("disabled")) {
        return obj.removeClass("disabled");
      }
    };

    Page.prototype.changeActive = function(active, index) {
      this.disActive(this.currPageLi);
      this.active(active);
      this.currPageLi = active;
      this.enable($("a.prev").parent());
      this.enable($("a.next").parent());
      if (index <= 0) {
        this.disable($("a.prev").parent());
      }
      if (index >= this.pageNum - 1) {
        return this.disable($("a.next").parent());
      }
    };

    Page.prototype.clickPagination = function(pageAnchor) {
      var activeIndex, activeLi;
      if (pageAnchor.parent().is('.disabled, .active')) {
        return;
      }
      if (pageAnchor.hasClass("prev")) {
        activeLi = this.currPageLi.prev();
      } else if (pageAnchor.hasClass("next")) {
        activeLi = this.currPageLi.next();
      } else {
        activeLi = pageAnchor.parent();
      }
      activeIndex = parseInt(activeLi.children("a:first").text(), 10) - 1;
      this.changeActive(activeLi, activeIndex);
      return this.renderPosts(activeIndex);
    };

    return Page;

  })();

  render = function(category, paginate) {
    var _this = this;
    if (category == null) {
      category = "all";
    }
    if (paginate == null) {
      paginate = 10;
    }
    return $.getJSON('/posts.json', function(data) {
      var page;
      page = new Page(data, category, paginate);
      return $("a.pagination").click(function(eventObj) {
        return page.clickPagination($(eventObj.currentTarget));
      });
    });
  };
